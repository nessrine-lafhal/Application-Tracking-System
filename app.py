import streamlit as st
import sqlite3
import os
import pandas as pd
import numpy as np
import cv2
import tempfile
from PIL import Image
import time
import spacy
import pytesseract
from transformers import pipeline, AutoTokenizer, AutoModel
import torch
from sklearn.metrics.pairwise import cosine_similarity
import re
import io
import base64
from streamlit_webrtc import webrtc_streamer, VideoTransformerBase
import mediapipe as mp
import layoutparser as lp
import matplotlib.pyplot as plt
from pathlib import Path

# Configuration de la page
st.set_page_config(
    page_title="ATS Intelligent",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialisation de la base de donn√©es
def init_db():
    conn = sqlite3.connect('ats_database.db')
    c = conn.cursor()
    
    # Table des candidats
    c.execute('''
    CREATE TABLE IF NOT EXISTS candidates (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        email TEXT UNIQUE NOT NULL,
        phone TEXT,
        cv_path TEXT,
        job_id INTEGER,
        cv_match_score REAL,
        written_interview_score REAL,
        video_interview_score REAL,
        documents_score REAL,
        final_score REAL,
        status TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # Table des offres d'emploi
    c.execute('''
    CREATE TABLE IF NOT EXISTS jobs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        description TEXT NOT NULL,
        required_skills TEXT,
        required_experience INTEGER,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # Table des documents
    c.execute('''
    CREATE TABLE IF NOT EXISTS documents (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        candidate_id INTEGER,
        document_type TEXT,
        document_path TEXT,
        authenticity_score REAL,
        verified BOOLEAN,
        FOREIGN KEY (candidate_id) REFERENCES candidates (id)
    )
    ''')
    
    # Table des entretiens
    c.execute('''
    CREATE TABLE IF NOT EXISTS interviews (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        candidate_id INTEGER,
        job_id INTEGER,
        questions TEXT,
        answers TEXT,
        written_score REAL,
        video_score REAL,
        emotions_data TEXT,
        FOREIGN KEY (candidate_id) REFERENCES candidates (id),
        FOREIGN KEY (job_id) REFERENCES jobs (id)
    )
    ''')
    
    conn.commit()
    conn.close()

# Initialisation des mod√®les NLP
@st.cache_resource
def load_nlp_models():
    # Chargement du mod√®le spaCy
    nlp = spacy.load("fr_core_news_md")
    
    # Chargement du mod√®le de transformers pour l'analyse s√©mantique
    tokenizer = AutoTokenizer.from_pretrained("camembert-base")
    model = AutoModel.from_pretrained("camembert-base")
    
    # Mod√®le pour la classification de documents
    document_model = lp.Detectron2LayoutModel(
        'lp://PubLayNet/mask_rcnn_X_101_32x8d_FPN_3x/config',
        extra_config=["MODEL.ROI_HEADS.SCORE_THRESH_TEST", 0.8],
        label_map={0: "Text", 1: "Title", 2: "List", 3: "Table", 4: "Figure"}
    )
    
    return {
        "nlp": nlp,
        "tokenizer": tokenizer,
        "model": model,
        "document_model": document_model
    }

# Fonction pour extraire le texte d'un PDF
def extract_text_from_pdf(pdf_file):
    try:
        import PyPDF2
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text()
        return text
    except Exception as e:
        st.error(f"Erreur lors de l'extraction du texte du PDF: {e}")
        return ""

# Fonction pour extraire le texte d'un document Word
def extract_text_from_docx(docx_file):
    try:
        import docx
        doc = docx.Document(docx_file)
        text = ""
        for para in doc.paragraphs:
            text += para.text + "\n"
        return text
    except Exception as e:
        st.error(f"Erreur lors de l'extraction du texte du document Word: {e}")
        return ""

# Fonction pour calculer le score de matching entre CV et description de poste
def calculate_matching_score(cv_text, job_description, models):
    nlp = models["nlp"]
    tokenizer = models["tokenizer"]
    model = models["model"]
    
    # Traitement avec spaCy pour l'extraction d'entit√©s
    cv_doc = nlp(cv_text)
    job_doc = nlp(job_description)
    
    # Extraction des comp√©tences et exp√©riences
    cv_skills = [ent.text for ent in cv_doc.ents if ent.label_ in ["SKILL", "ORG", "PRODUCT"]]
    job_skills = [ent.text for ent in job_doc.ents if ent.label_ in ["SKILL", "ORG", "PRODUCT"]]
    
    # Calcul de similarit√© avec transformers
    cv_inputs = tokenizer(cv_text, return_tensors="pt", truncation=True, max_length=512, padding=True)
    job_inputs = tokenizer(job_description, return_tensors="pt", truncation=True, max_length=512, padding=True)
    
    with torch.no_grad():
        cv_outputs = model(**cv_inputs)
        job_outputs = model(**job_inputs)
    
    cv_embeddings = cv_outputs.last_hidden_state.mean(dim=1)
    job_embeddings = job_outputs.last_hidden_state.mean(dim=1)
    
    # Calcul de la similarit√© cosinus
    similarity = cosine_similarity(
        cv_embeddings.detach().numpy(),
        job_embeddings.detach().numpy()
    )[0][0]
    
    # Calcul du score final (0-100)
    matching_score = similarity * 100
    
    return min(max(matching_score, 0), 100)

# Classe pour la d√©tection des √©motions faciales
class EmotionDetector(VideoTransformerBase):
    def __init__(self):
        self.mp_face_detection = mp.solutions.face_detection
        self.mp_face_mesh = mp.solutions.face_mesh
        self.face_detection = self.mp_face_detection.FaceDetection(min_detection_confidence=0.5)
        self.face_mesh = self.mp_face_mesh.FaceMesh(min_detection_confidence=0.5, min_tracking_confidence=0.5)
        self.emotions = {
            0: "Col√®re",
            1: "D√©go√ªt",
            2: "Peur",
            3: "Joie",
            4: "Tristesse",
            5: "Surprise",
            6: "Neutre"
        }
        self.emotion_counts = {emotion: 0 for emotion in self.emotions.values()}
        self.frame_count = 0
        
    def transform(self, frame):
        img = frame.to_ndarray(format="bgr24")
        
        # D√©tection du visage
        results = self.face_detection.process(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
        
        if results.detections:
            for detection in results.detections:
                bboxC = detection.location_data.relative_bounding_box
                ih, iw, _ = img.shape
                bbox = int(bboxC.xmin * iw), int(bboxC.ymin * ih), \
                       int(bboxC.width * iw), int(bboxC.height * ih)
                
                # Extraction du visage
                face = img[bbox[1]:bbox[1]+bbox[3], bbox[0]:bbox[0]+bbox[2]]
                
                if face.size > 0:
                    # Simuler la d√©tection d'√©motions (dans un vrai cas, utilisez un mod√®le d'IA)
                    # Ici, nous utilisons une d√©tection al√©atoire pour la d√©monstration
                    emotion_idx = np.random.randint(0, 7)
                    emotion = self.emotions[emotion_idx]
                    self.emotion_counts[emotion] += 1
                    self.frame_count += 1
                    
                    # Affichage de l'√©motion sur l'image
                    cv2.rectangle(img, (bbox[0], bbox[1]), (bbox[0]+bbox[2], bbox[1]+bbox[3]), (0, 255, 0), 2)
                    cv2.putText(img, emotion, (bbox[0], bbox[1]-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)
        
        return img
    
    def get_emotion_stats(self):
        if self.frame_count == 0:
            return {emotion: 0 for emotion in self.emotions.values()}
        
        return {emotion: count / self.frame_count for emotion, count in self.emotion_counts.items()}

# Fonction pour g√©n√©rer des questions d'entretien bas√©es sur le CV et la description de poste
def generate_interview_questions(cv_text, job_description, models):
    nlp = models["nlp"]
    
    # Analyse du CV et de la description de poste
    cv_doc = nlp(cv_text)
    job_doc = nlp(job_description)
    
    # Extraction des comp√©tences et exp√©riences cl√©s
    cv_skills = [ent.text for ent in cv_doc.ents if ent.label_ in ["SKILL", "ORG", "PRODUCT"]]
    job_skills = [ent.text for ent in job_doc.ents if ent.label_ in ["SKILL", "ORG", "PRODUCT"]]
    
    # G√©n√©ration de questions bas√©es sur les comp√©tences requises
    questions = [
        f"Pouvez-vous d√©crire votre exp√©rience avec {skill}?" for skill in job_skills[:2]
    ]
    
    # Questions g√©n√©rales
    general_questions = [
        "D√©crivez une situation difficile que vous avez rencontr√©e dans votre travail pr√©c√©dent et comment vous l'avez r√©solue.",
        "Quelles sont vos principales forces et faiblesses professionnelles?",
        "Pourquoi √™tes-vous int√©ress√© par ce poste?",
        "O√π vous voyez-vous dans 5 ans?"
    ]
    
    # Combiner les questions sp√©cifiques et g√©n√©rales
    all_questions = questions + general_questions
    
    # Limiter √† 4 questions maximum
    return all_questions[:4]

# Fonction pour √©valuer les r√©ponses de l'entretien √©crit
def evaluate_written_answers(questions, answers, models):
    tokenizer = models["tokenizer"]
    model = models["model"]
    
    scores = []
    
    for q, a in zip(questions, answers):
        # V√©rifier la longueur de la r√©ponse
        if len(a.split()) < 10:
            scores.append(0.3)  # R√©ponse trop courte
            continue
            
        # Encodage de la question et de la r√©ponse
        q_inputs = tokenizer(q, return_tensors="pt", truncation=True, max_length=512, padding=True)
        a_inputs = tokenizer(a, return_tensors="pt", truncation=True, max_length=512, padding=True)
        
        with torch.no_grad():
            q_outputs = model(**q_inputs)
            a_outputs = model(**a_inputs)
        
        q_embeddings = q_outputs.last_hidden_state.mean(dim=1)
        a_embeddings = a_outputs.last_hidden_state.mean(dim=1)
        
        # Calcul de la similarit√© cosinus
        similarity = cosine_similarity(
            q_embeddings.detach().numpy(),
            a_embeddings.detach().numpy()
        )[0][0]
        
        # Normalisation du score (0-1)
        score = (similarity + 1) / 2
        scores.append(score)
    
    # Score moyen sur 100
    return sum(scores) / len(scores) * 100 if scores else 0

# Fonction pour v√©rifier l'authenticit√© des documents
def verify_document_authenticity(document_path, document_type, models):
    try:
        # Chargement de l'image du document
        image = cv2.imread(document_path)
        if image is None:
            return 0.0
            
        # Extraction du texte avec OCR
        text = pytesseract.image_to_string(image, lang='fra')
        
        # Analyse de la mise en page avec LayoutParser
        layout_model = models["document_model"]
        layout = layout_model.detect(image)
        
        # V√©rification bas√©e sur le type de document
        authenticity_score = 0.0
        
        if document_type == "CIN":
            # V√©rifier la pr√©sence d'√©l√©ments typiques d'une CIN
            if re.search(r"CARTE NATIONALE D'IDENTIT√â|R√âPUBLIQUE FRAN√áAISE", text, re.IGNORECASE):
                authenticity_score += 0.3
            if re.search(r"\d{12}|\d{4} \d{4} \d{4}", text):  # Num√©ro de CIN
                authenticity_score += 0.3
            if re.search(r"\d{2}/\d{2}/\d{4}", text):  # Date de naissance
                authenticity_score += 0.2
            if len(layout) >= 3:  # Au moins 3 blocs (photo, texte, signature)
                authenticity_score += 0.2
                
        elif document_type == "Dipl√¥me":
            # V√©rifier la pr√©sence d'√©l√©ments typiques d'un dipl√¥me
            if re.search(r"DIPL√îME|UNIVERSIT√â|√âCOLE|MASTER|LICENCE|BAC", text, re.IGNORECASE):
                authenticity_score += 0.3
            if re.search(r"D√âLIVR√â √Ä|OBTENU PAR|D√âCERN√â √Ä", text, re.IGNORECASE):
                authenticity_score += 0.2
            if re.search(r"\d{2}/\d{2}/\d{4}|\d{4}", text):  # Date
                authenticity_score += 0.2
            if re.search(r"SIGNATURE|DIRECTEUR|PR√âSIDENT", text, re.IGNORECASE):
                authenticity_score += 0.3
                
        elif document_type == "Passeport":
            # V√©rifier la pr√©sence d'√©l√©ments typiques d'un passeport
            if re.search(r"PASSEPORT|PASSPORT", text, re.IGNORECASE):
                authenticity_score += 0.3
            if re.search(r"[A-Z]{2}\d{7}|\d{9}", text):  # Num√©ro de passeport
                authenticity_score += 0.3
            if re.search(r"\d{2}/\d{2}/\d{4}", text):  # Date
                authenticity_score += 0.2
            if len(layout) >= 4:  # Au moins 4 blocs (photo, donn√©es, signature, MRZ)
                authenticity_score += 0.2
                
        elif document_type == "Permis de conduire":
            # V√©rifier la pr√©sence d'√©l√©ments typiques d'un permis de conduire
            if re.search(r"PERMIS DE CONDUIRE|DRIVING LICENCE", text, re.IGNORECASE):
                authenticity_score += 0.3
            if re.search(r"CAT√âGORIE|CATEGORY", text, re.IGNORECASE):
                authenticity_score += 0.2
            if re.search(r"\d{2}/\d{2}/\d{4}", text):  # Date
                authenticity_score += 0.2
            if re.search(r"[A-Z]{2}\d{2}|[A-Z]\d{2}", text):  # Num√©ro de permis
                authenticity_score += 0.3
        
        else:
            # Document g√©n√©rique
            authenticity_score = 0.5  # Score par d√©faut
            
        return min(authenticity_score, 1.0) * 100
        
    except Exception as e:
        st.error(f"Erreur lors de la v√©rification du document: {e}")
        return 0.0

# Interface principale
def main():
    # Initialisation de la base de donn√©es
    init_db()
    
    # Chargement des mod√®les NLP
    models = load_nlp_models()
    
    # Sidebar pour la navigation
    st.sidebar.title("ATS Intelligent")
    page = st.sidebar.selectbox(
        "Navigation",
        ["Accueil", "Ajouter une offre d'emploi", "Postuler", "Tableau de bord"]
    )
    
    # Page d'accueil
    if page == "Accueil":
        st.title("Plateforme Intelligente de Recrutement")
        st.subheader("Bienvenue sur notre syst√®me ATS bas√© sur l'IA")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.info("""
            ### Fonctionnalit√©s principales:
            - üîç Matching CV-Poste avec IA
            - üí¨ Entretien √©crit automatis√©
            - üé• Entretien vid√©o avec analyse des √©motions
            - üóÇÔ∏è V√©rification d'authenticit√© des documents
            - üìä Tableau de bord complet
            """)
        
        with col2:
            st.success("""
            ### Comment √ßa marche:
            1. Les recruteurs ajoutent des offres d'emploi
            2. Les candidats postulent avec leur CV
            3. L'IA analyse la compatibilit√©
            4. Les candidats compatibles passent des entretiens automatis√©s
            5. Les documents sont v√©rifi√©s
            6. Les recruteurs consultent les r√©sultats dans le tableau de bord
            """)
    
    # Page pour ajouter une offre d'emploi
    elif page == "Ajouter une offre d'emploi":
        st.title("Ajouter une nouvelle offre d'emploi")
        
        with st.form("job_form"):
            job_title = st.text_input("Titre du poste")
            job_description = st.text_area("Description du poste", height=200)
            required_skills = st.text_area("Comp√©tences requises (s√©par√©es par des virgules)")
            required_experience = st.number_input("Exp√©rience requise (ann√©es)", min_value=0, max_value=20)
            
            submit_button = st.form_submit_button("Ajouter l'offre")
            
            if submit_button:
                if job_title and job_description:
                    conn = sqlite3.connect('ats_database.db')
                    c = conn.cursor()
                    c.execute(
                        "INSERT INTO jobs (title, description, required_skills, required_experience) VALUES (?, ?, ?, ?)",
                        (job_title, job_description, required_skills, required_experience)
                    )
                    conn.commit()
                    conn.close()
                    st.success("Offre d'emploi ajout√©e avec succ√®s!")
                else:
                    st.error("Veuillez remplir tous les champs obligatoires.")
        
        # Afficher les offres existantes
        st.subheader("Offres d'emploi existantes")
        conn = sqlite3.connect('ats_database.db')
        jobs_df = pd.read_sql_query("SELECT id, title, required_experience, created_at FROM jobs ORDER BY created_at DESC", conn)
        conn.close()
        
        if not jobs_df.empty:
            st.dataframe(jobs_df)
        else:
            st.info("Aucune offre d'emploi n'a √©t√© ajout√©e.")
    
    # Page pour postuler
    elif page == "Postuler":
        st.title("Postuler √† une offre d'emploi")
        
        # S√©lection de l'offre d'emploi
        conn = sqlite3.connect('ats_database.db')
        jobs_df = pd.read_sql_query("SELECT id, title FROM jobs", conn)
        conn.close()
        
        if jobs_df.empty:
            st.warning("Aucune offre d'emploi disponible. Veuillez demander au recruteur d'ajouter des offres.")
            return
            
        job_id = st.selectbox("S√©lectionnez une offre d'emploi", jobs_df["id"].tolist(), format_func=lambda x: jobs_df[jobs_df["id"] == x]["title"].iloc[0])
        
        # R√©cup√©ration de la description du poste
        conn = sqlite3.connect('ats_database.db')
        c = conn.cursor()
        c.execute("SELECT description FROM jobs WHERE id = ?", (job_id,))
        job_description = c.fetchone()[0]
        conn.close()
        
        # Formulaire de candidature
        with st.form("application_form"):
            name = st.text_input("Nom complet")
            email = st.text_input("Email")
            phone = st.text_input("T√©l√©phone")
            
            cv_file = st.file_uploader("T√©l√©charger votre CV (PDF ou Word)", type=["pdf", "docx"])
            
            submit_button = st.form_submit_button("Postuler")
            
            if submit_button:
                if name and email and cv_file:
                    # Sauvegarde du CV
                    cv_path = f"uploads/cv_{int(time.time())}_{cv_file.name}"
                    os.makedirs(os.path.dirname(cv_path), exist_ok=True)
                    
                    with open(cv_path, "wb") as f:
                        f.write(cv_file.getbuffer())
                    
                    # Extraction du texte du CV
                    if cv_file.name.endswith('.pdf'):
                        cv_text = extract_text_from_pdf(cv_file)
                    elif cv_file.name.endswith('.docx'):
                        cv_text = extract_text_from_docx(cv_file)
                    else:
                        st.error("Format de fichier non support√©.")
                        return
                    
                    # Calcul du score de matching
                    matching_score = calculate_matching_score(cv_text, job_description, models)
                    
                    # Enregistrement du candidat dans la base de donn√©es
                    conn = sqlite3.connect('ats_database.db')
                    c = conn.cursor()
                    c.execute(
                        "INSERT INTO candidates (name, email, phone, cv_path, job_id, cv_match_score, status) VALUES (?, ?, ?, ?, ?, ?, ?)",
                        (name, email, phone, cv_path, job_id, matching_score, "En attente")
                    )
                    candidate_id = c.lastrowid
                    conn.commit()
                    conn.close()
                    
                    st.success("Candidature soumise avec succ√®s!")
                    
                    # Affichage du score de matching
                    st.metric("Score de compatibilit√© CV-Poste", f"{matching_score:.1f}/100")
                    
                    if matching_score >= 70:
                        st.success("F√©licitations! Votre profil correspond bien √† cette offre d'emploi.")
                        
                        # Passage √† l'√©tape suivante: entretien √©crit
                        st.subheader("Entretien √©crit automatis√©")
                        st.info("Veuillez r√©pondre aux questions suivantes pour continuer le processus de recrutement.")
                        
                        # G√©n√©ration des questions d'entretien
                        questions = generate_interview_questions(cv_text, job_description, models)
                        
                        answers = []
                        for i, question in enumerate(questions):
                            answer = st.text_area(f"Question {i+1}: {question}", key=f"q{i}")
                            answers.append(answer)
                        
                        if st.button("Soumettre les r√©ponses"):
                            if all(answers):
                                # √âvaluation des r√©ponses
                                written_score = evaluate_written_answers(questions, answers, models)
                                
                                # Mise √† jour du score dans la base de donn√©es
                                conn = sqlite3.connect('ats_database.db')
                                c = conn.cursor()
                                c.execute(
                                    "UPDATE candidates SET written_interview_score = ? WHERE id = ?",
                                    (written_score, candidate_id)
                                )
                                
                                # Enregistrement des questions et r√©ponses
                                c.execute(
                                    "INSERT INTO interviews (candidate_id, job_id, questions, answers, written_score) VALUES (?, ?, ?, ?, ?)",
                                    (candidate_id, job_id, str(questions), str(answers), written_score)
                                )
                                conn.commit()
                                conn.close()
                                
                                st.metric("Score de l'entretien √©crit", f"{written_score:.1f}/100")
                                
                                if written_score >= 60:
                                    st.success("Vous avez r√©ussi l'entretien √©crit!")
                                    
                                    # Passage √† l'√©tape suivante: entretien vid√©o
                                    st.subheader("Entretien vid√©o avec analyse des √©motions")
                                    st.info("Veuillez activer votre cam√©ra et r√©pondre aux questions qui s'afficheront.")
                                    
                                    # Affichage des questions pour l'entretien vid√©o
                                    video_questions = [
                                        "Pr√©sentez-vous en quelques mots.",
                                        "Pourquoi √™tes-vous int√©ress√© par ce poste?",
                                        "Quelle est votre plus grande r√©ussite professionnelle?",
                                        "Comment g√©rez-vous le stress au travail?"
                                    ]
                                    
                                    for i, question in enumerate(video_questions):
                                        st.write(f"**Question {i+1}:** {question}")
                                    
                                    # Interface de webcam avec d√©tection d'√©motions
                                    emotion_detector = EmotionDetector()
                                    webrtc_ctx = webrtc_streamer(
                                        key="emotion-detection",
                                        video_transformer_factory=lambda: emotion_detector,
                                        async_transform=True
                                    )
                                    
                                    if st.button("Terminer l'entretien vid√©o"):
                                        # R√©cup√©ration des statistiques d'√©motions
                                        emotion_stats = emotion_detector.get_emotion_stats()
                                        
                                        # Calcul du score vid√©o
                                        # Formule: plus de joie et neutre = meilleur score
                                        video_score = (
                                            emotion_stats.get("Joie", 0) * 0.4 +
                                            emotion_stats.get("Neutre", 0) * 0.3 +
                                            emotion_stats.get("Surprise", 0) * 0.1 +
                                            (1 - emotion_stats.get("Col√®re", 0)) * 0.1 +
                                            (1 - emotion_stats.get("Tristesse", 0)) * 0.05 +
                                            (1 - emotion_stats.get("Peur", 0)) * 0.05
                                        ) * 100
                                        
                                        # Mise √† jour du score dans la base de donn√©es
                                        conn = sqlite3.connect('ats_database.db')
                                        c = conn.cursor()
                                        c.execute(
                                            "UPDATE candidates SET video_interview_score = ? WHERE id = ?",
                                            (video_score, candidate_id)
                                        )
                                        
                                        # Mise √† jour des donn√©es d'entretien
                                        c.execute(
                                            "UPDATE interviews SET video_score = ?, emotions_data = ? WHERE candidate_id = ?",
                                            (video_score, str(emotion_stats), candidate_id)
                                        )
                                        conn.commit()
                                        conn.close()
                                        
                                        st.metric("Score de l'entretien vid√©o", f"{video_score:.1f}/100")
                                        
                                        # Calcul du score moyen des entretiens
                                        avg_interview_score = (written_score + video_score) / 2
                                        
                                        if avg_interview_score >= 65:
                                            st.success("F√©licitations! Vous avez r√©ussi les entretiens.")
                                            
                                            # Passage √† l'√©tape suivante: v√©rification des documents
                                            st.subheader("V√©rification des documents")
                                            st.info("Veuillez t√©l√©charger vos documents officiels pour v√©rification.")
                                            
                                            document_types = ["CIN", "Dipl√¥me de bac", "Dipl√¥me de master", "Passeport", "Permis de conduire"]
                                            uploaded_docs = {}
                                            
                                            for doc_type in document_types:
                                                doc_file = st.file_uploader(f"T√©l√©charger votre {doc_type}", type=["jpg", "jpeg", "png", "pdf"], key=doc_type)
                                                if doc_file:
                                                    uploaded_docs[doc_type] = doc_file
                                            
                                            if st.button("Soumettre les documents"):
                                                if uploaded_docs:
                                                    total_auth_score = 0
                                                    
                                                    for doc_type, doc_file in uploaded_docs.items():
                                                        # Sauvegarde du document
                                                        doc_path = f"uploads/docs_{int(time.time())}_{doc_file.name}"
                                                        os.makedirs(os.path.dirname(doc_path), exist_ok=True)
                                                        
                                                        with open(doc_path, "wb") as f:
                                                            f.write(doc_file.getbuffer())
                                                        
                                                        # V√©rification de l'authenticit√©
                                                        auth_score = verify_document_authenticity(doc_path, doc_type.split()[0], models)
                                                        
                                                        # Enregistrement du document dans la base de donn√©es
                                                        conn = sqlite3.connect('ats_database.db')
                                                        c = conn.cursor()
                                                        c.execute(
                                                            "INSERT INTO documents (candidate_id, document_type, document_path, authenticity_score, verified) VALUES (?, ?, ?, ?, ?)",
                                                            (candidate_id, doc_type, doc_path, auth_score, auth_score >= 70)
                                                        )
                                                        conn.commit()
                                                        conn.close()
                                                        
                                                        total_auth_score += auth_score
                                                        
                                                        st.write(f"{doc_type}: Score d'authenticit√© {auth_score:.1f}/100")
                                                    
                                                    # Calcul du score moyen d'authenticit√©
                                                    avg_auth_score = total_auth_score / len(uploaded_docs)
                                                    
                                                    # Mise √† jour du score dans la base de donn√©es
                                                    conn = sqlite3.connect('ats_database.db')
                                                    c = conn.cursor()
                                                    c.execute(
                                                        "UPDATE candidates SET documents_score = ? WHERE id = ?",
                                                        (avg_auth_score, candidate_id)
                                                    )
                                                    
                                                    # Calcul du score final
                                                    c.execute(
                                                        "SELECT cv_match_score, written_interview_score, video_interview_score, documents_score FROM candidates WHERE id = ?",
                                                        (candidate_id,)
                                                    )
                                                    scores = c.fetchone()
                                                    
                                                    final_score = (
                                                        scores[0] * 0.3 +  # CV match
                                                        scores[1] * 0.25 +  # Written interview
                                                        scores[2] * 0.25 +  # Video interview
                                                        scores[3] * 0.2  # Documents
                                                    )
                                                    
                                                    # Mise √† jour du statut et du score final
                                                    status = "Pr√©s√©lectionn√©" if final_score >= 70 else "Rejet√©"
                                                    c.execute(
                                                        "UPDATE candidates SET final_score = ?, status = ? WHERE id = ?",
                                                        (final_score, status, candidate_id)
                                                    )
                                                    conn.commit()
                                                    conn.close()
                                                    
                                                    st.metric("Score final", f"{final_score:.1f}/100")
                                                    
                                                    if final_score >= 70:
                                                        st.success("F√©licitations! Votre candidature a √©t√© pr√©s√©lectionn√©e.")
                                                        st.balloons()
                                                    else:
                                                        st.error("Nous sommes d√©sol√©s, mais votre candidature n'a pas √©t√© retenue.")
                                                else:
                                                    st.warning("Veuillez t√©l√©charger au moins un document.")
                                        else:
                                            st.error("Nous sommes d√©sol√©s, mais vous n'avez pas obtenu un score suffisant aux entretiens.")
                                else:
                                    st.error("Nous sommes d√©sol√©s, mais vous n'avez pas obtenu un score suffisant √† l'entretien √©crit.")
                            else:
                                st.warning("Veuillez r√©pondre √† toutes les questions.")
                    else:
                        st.error("Nous sommes d√©sol√©s, mais votre profil ne correspond pas suffisamment √† cette offre d'emploi.")
                else:
                    st.warning("Veuillez remplir tous les champs obligatoires.")
    
    # Page du tableau de bord
    elif page == "Tableau de bord":
        st.title("Tableau de bord de recrutement")
        
        # Filtres
        col1, col2 = st.columns(2)
        
        with col1:
            conn = sqlite3.connect('ats_database.db')
            jobs_df = pd.read_sql_query("SELECT id, title FROM jobs", conn)
            conn.close()
            
            if not jobs_df.empty:
                job_filter = st.selectbox(
                    "Filtrer par offre d'emploi",
                    ["Toutes les offres"] + jobs_df["id"].tolist(),
                    format_func=lambda x: "Toutes les offres" if x == "Toutes les offres" else jobs_df[jobs_df["id"] == x]["title"].iloc[0]
                )
            else:
                job_filter = "Toutes les offres"
        
        with col2:
            status_filter = st.selectbox(
                "Filtrer par statut",
                ["Tous les statuts", "En attente", "Pr√©s√©lectionn√©", "Rejet√©"]
            )
        
        # Construction de la requ√™te SQL avec filtres
        query = "SELECT * FROM candidates"
        params = []
        
        if job_filter != "Toutes les offres" or status_filter != "Tous les statuts":
            query += " WHERE"
            
            if job_filter != "Toutes les offres":
                query += " job_id = ?"
                params.append(job_filter)
                
                if status_filter != "Tous les statuts":
                    query += " AND status = ?"
                    params.append(status_filter)
            elif status_filter != "Tous les statuts":
                query += " status = ?"
                params.append(status_filter)
        
        # R√©cup√©ration des donn√©es
        conn = sqlite3.connect('ats_database.db')
        candidates_df = pd.read_sql_query(query, conn, params=params)
        conn.close()
        
        if not candidates_df.empty:
            # Ajout du nom de l'offre d'emploi
            conn = sqlite3.connect('ats_database.db')
            jobs_df = pd.read_sql_query("SELECT id, title FROM jobs", conn)
            conn.close()
            
            candidates_df = candidates_df.merge(jobs_df, left_on="job_id", right_on="id", suffixes=("", "_job"))
            candidates_df.rename(columns={"title": "job_title"}, inplace=True)
            
            # Affichage des statistiques
            st.subheader("Statistiques")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("Total des candidats", len(candidates_df))
            
            with col2:
                preselected = len(candidates_df[candidates_df["status"] == "Pr√©s√©lectionn√©"])
                st.metric("Candidats pr√©s√©lectionn√©s", preselected)
            
            with col3:
                rejected = len(candidates_df[candidates_df["status"] == "Rejet√©"])
                st.metric("Candidats rejet√©s", rejected)
            
            with col4:
                pending = len(candidates_df[candidates_df["status"] == "En attente"])
                st.metric("Candidats en attente", pending)
            
            # Graphiques
            st.subheader("Analyse des candidatures")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Distribution des scores finaux
                fig, ax = plt.subplots(figsize=(8, 5))
                candidates_df["final_score"].fillna(0).hist(bins=10, ax=ax)
                ax.set_title("Distribution des scores finaux")
                ax.set_xlabel("Score")
                ax.set_ylabel("Nombre de candidats")
                st.pyplot(fig)
            
            with col2:
                # R√©partition des statuts
                status_counts = candidates_df["status"].value_counts()
                fig, ax = plt.subplots(figsize=(8, 5))
                ax.pie(status_counts, labels=status_counts.index, autopct='%1.1f%%')
                ax.set_title("R√©partition des statuts")
                st.pyplot(fig)
            
            # Tableau des candidats
            st.subheader("Liste des candidats")
            
            # S√©lection et renommage des colonnes √† afficher
            display_df = candidates_df[[
                "id", "name", "email", "job_title", "cv_match_score",
                "written_interview_score", "video_interview_score",
                "documents_score", "final_score", "status"
            ]].copy()
            
            display_df.columns = [
                "ID", "Nom", "Email", "Poste", "Score CV",
                "Score Entretien √âcrit", "Score Entretien Vid√©o",
                "Score Documents", "Score Final", "Statut"
            ]
            
            # Remplacement des valeurs NaN par des tirets
            display_df = display_df.fillna("-")
            
            # Affichage du tableau
            st.dataframe(display_df)
            
            # D√©tails d'un candidat
            st.subheader("D√©tails d'un candidat")
            
            selected_candidate = st.selectbox(
                "S√©lectionner un candidat",
                candidates_df["id"].tolist(),
                format_func=lambda x: candidates_df[candidates_df["id"] == x]["name"].iloc[0]
            )
            
            if selected_candidate:
                candidate = candidates_df[candidates_df["id"] == selected_candidate].iloc[0]
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**Nom:** {candidate['name']}")
                    st.write(f"**Email:** {candidate['email']}")
                    st.write(f"**T√©l√©phone:** {candidate['phone']}")
                    st.write(f"**Poste:** {candidate['job_title']}")
                    st.write(f"**Statut:** {candidate['status']}")
                
                with col2:
                    st.metric("Score CV", f"{candidate['cv_match_score']:.1f}/100" if pd.notna(candidate['cv_match_score']) else "-")
                    st.metric("Score Entretien √âcrit", f"{candidate['written_interview_score']:.1f}/100" if pd.notna(candidate['written_interview_score']) else "-")
                    st.metric("Score Entretien Vid√©o", f"{candidate['video_interview_score']:.1f}/100" if pd.notna(candidate['video_interview_score']) else "-")
                    st.metric("Score Documents", f"{candidate['documents_score']:.1f}/100" if pd.notna(candidate['documents_score']) else "-")
                    st.metric("Score Final", f"{candidate['final_score']:.1f}/100" if pd.notna(candidate['final_score']) else "-")
                
                # R√©cup√©ration des entretiens
                conn = sqlite3.connect('ats_database.db')
                interviews_df = pd.read_sql_query(
                    "SELECT * FROM interviews WHERE candidate_id = ?",
                    conn,
                    params=(selected_candidate,)
                )
                conn.close()
                
                if not interviews_df.empty:
                    st.subheader("D√©tails de l'entretien")
                    
                    interview = interviews_df.iloc[0]
                    
                    # Affichage des questions et r√©ponses
                    try:
                        questions = eval(interview["questions"])
                        answers = eval(interview["answers"])
                        
                        for q, a in zip(questions, answers):
                            st.write(f"**Q:** {q}")
                            st.write(f"**R:** {a}")
                            st.write("---")
                    except:
                        st.write("Impossible d'afficher les questions et r√©ponses.")
                    
                    # Affichage des √©motions si disponibles
                    if pd.notna(interview["emotions_data"]):
                        try:
                            emotions_data = eval(interview["emotions_data"])
                            
                            st.subheader("Analyse des √©motions")
                            
                            # Graphique des √©motions
                            fig, ax = plt.subplots(figsize=(8, 5))
                            emotions = list(emotions_data.keys())
                            values = list(emotions_data.values())
                            
                            ax.bar(emotions, values)
                            ax.set_title("R√©partition des √©motions pendant l'entretien vid√©o")
                            ax.set_ylabel("Proportion")
                            plt.xticks(rotation=45)
                            st.pyplot(fig)
                        except:
                            st.write("Impossible d'afficher l'analyse des √©motions.")
                
                # R√©cup√©ration des documents
                conn = sqlite3.connect('ats_database.db')
                documents_df = pd.read_sql_query(
                    "SELECT * FROM documents WHERE candidate_id = ?",
                    conn,
                    params=(selected_candidate,)
                )
                conn.close()
                
                if not documents_df.empty:
                    st.subheader("Documents soumis")
                    
                    for _, doc in documents_df.iterrows():
                        col1, col2 = st.columns([1, 3])
                        
                        with col1:
                            st.write(f"**Type:** {doc['document_type']}")
                            st.write(f"**Score:** {doc['authenticity_score']:.1f}/100")
                            st.write(f"**V√©rifi√©:** {'Oui' if doc['verified'] else 'Non'}")
                        
                        with col2:
                            try:
                                if os.path.exists(doc['document_path']):
                                    image = Image.open(doc['document_path'])
                                    st.image(image, width=300, caption=doc['document_type'])
                            except:
                                st.write("Impossible d'afficher l'image du document.")
        else:
            st.info("Aucun candidat ne correspond aux crit√®res de filtrage.")

if __name__ == "__main__":
    main()
